---
- name: Playbook for k8s install prerequisites
  hosts: all
  become: true
  gather_facts: true
  vars:
    packages_for_install:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - apt-transport-https
      - net-tools

  tasks:
    - name: Play to set time
      block:
        - name: Set timezone
          community.general.timezone:
            name: Europe/Moscow
          register: timeset_result

        - name: Restart cron service
          ansible.builtin.service:
            name: cron
            state: restarted
          when: timeset_result.changed

    - name: Play to fill k8s cluster CRI prerequisites
      block:
      # !!! Не выполнил требования для перехода на systemd в качестве менеджера
      # cgroup - для последующей проработки !!!
        - name: Remove swapfile
          ansible.posix.mount:
            path: swap
            fstype: swap
            state: absent
            backup: true

        - name: Create enties in hosts
          ansible.builtin.blockinfile:
            # backup: true
            state: present
            path: /etc/hosts
            block: |
              10.0.1.9  master
              10.0.1.10 node-10
              10.0.1.11 node-11

        - name: Prerequisite /etc/modules-load.d/k8s.conf
          ansible.builtin.blockinfile:
            path: /etc/modules-load.d/k8s.conf
            mode: '644'
            create: true
            state: present
            block: |
              overlay
              br_netfilter

        - name: Prerequisite load kernel modules
          community.general.modprobe:
            name: "{{ item }}"
            state: present
          loop:
            - overlay
            - br_netfilter

        # Define kernel variables
        - name: Prerequisite /etc/sysctl.d/k8s.conf
          ansible.builtin.blockinfile:
            path: /etc/sysctl.d/k8s.conf
            mode: '644'
            create: true
            state: present
            block: |
              net.bridge.bridge-nf-call-iptables=1
              net.bridge.bridge-nf-call-ip6tables=1
              net.ipv4.ip_forward=1
        # Define kernel variables and set in runtime
        - name: Prerequisite sysctl conf load
          ansible.posix.sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_set: true
          with_dict:
            net.bridge.bridge-nf-call-iptables: 1
            net.bridge.bridge-nf-call-ip6tables: 1
            net.ipv4.ip_forward: 1

        # Update the apt package index and install packages to allow apt to use a
        # repository over HTTPS
        - name: Install prerequisites packages
          ansible.builtin.apt:
            update_cache: true
            name: "{{ packages_for_install }}"

        - name: Add Docker GPG apt Key
          ansible.builtin.apt_key:
            url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
            state: present

        - name: Add docker repository to apt
          ansible.builtin.apt_repository:
            repo: >
              deb https://download.docker.com/linux/{{ ansible_distribution | lower }}
              {{ ansible_distribution_release }} stable
            state: present

        - name: Install containerd.io
          ansible.builtin.apt:
            update_cache: true
            name: containerd.io
            state: present

        - name: Create directory for kubectl config
          ansible.builtin.file:
            path: /etc/containerd
            state: directory
            mode: '755'

        - name: Create containerd config
          ansible.builtin.shell: |
              containerd config default > /etc/containerd/config.toml
          register: my_output
          changed_when: my_output.rc == 0

        - name: Configure containerd so that it starts using systemd as cgroup
          ansible.builtin.lineinfile:
            path: /etc/containerd/config.toml
            regexp: 'SystemdCgroup = false'
            line: SystemdCgroup = true

        - name: Restart containerd service
          ansible.builtin.service:
            name: containerd
            state: restarted

    - name: Play to install kubelet, kubeadm and kubectl
      block:
        - name: Add Google Cloud public signing key
          ansible.builtin.apt_key:
            url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
            state: present

        - name: Add the Kubernetes apt repository
          ansible.builtin.apt_repository:
            repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
            state: present

        - name: Install kubelet, kubeadm and kubectl
          ansible.builtin.apt:
            name:
              - kubelet
              - kubeadm
              - kubectl
            update_cache: true
            state: present

        - name: Prevent packages from being upgraded
          ansible.builtin.dpkg_selections:
            name: "{{ item }}"
            selection: hold
          loop:
            - kubelet
            - kubeadm
            - kubectl

    - name: Play to create cluster with kubeadm on control nodes
      when: inventory_hostname in groups['master_nodes']
      become: false
      block:
        - name: Create cluster kubeadm init
          become: true
          ansible.builtin.command:
            # use second NOT default network interface. Default is bridge.
            cmd: kubeadm init --apiserver-advertise-address=10.0.1.9
          register: output
          changed_when: output.rc == 0

        - name: Create directory for kubectl config
          ansible.builtin.file:
            path: $HOME/.kube
            state: directory
            mode: '775'

        - name: Configure kubectl interract with cluster
          ansible.builtin.shell: |
            sudo cp -n /etc/kubernetes/admin.conf $HOME/.kube/config
            sudo chown $(id -u):$(id -g) $HOME/.kube/config
          when: inventory_hostname in groups['master_nodes']
          register: output
          changed_when: output.rc == 0

        - name: Download weave-daemonset-k8s.yaml
          ansible.builtin.get_url:
            url: https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
            dest: /home/vagrant/weave-daemonset-k8s.yaml
            mode: '664'

        - name: Install Weave CNI Add-on
          ansible.builtin.command: kubectl apply -f /home/vagrant/weave-daemonset-k8s.yaml
          register: output
          changed_when: output.rc == 0

        - name: Save token to join cluster
          ansible.builtin.command: kubeadm token create --print-join-command
          register: token
          changed_when: token.rc != 0

    - name: Join nodes to cluster
      when: inventory_hostname in groups['worker_nodes']
      ansible.builtin.command: "{{ hostvars.master.token.stdout }}"
      register: output
      changed_when: output.rc == 0
