- name: Create containerd config
  ansible.builtin.shell:
    cmd: containerd config default
  register: config

- name: Make folder for containerd configuration
  ansible.builtin.file:
    path: /etc/containerd/
    state: directory
    mode: '741'

- name: Save config to file
  ansible.builtin.copy:
    content: "{{ config.stdout }}"
    dest: /etc/containerd/config.toml

- name: Debug
  ansible.builtin.debug:
    msg: "{{ result.changed }}"    

- name: Restart containerd service
  ansible.builtin.service:
    name: cron
    state: restarted
  when: result.changed

# Получение состояние службы/сервиса на хосте
- name: Get services status
  ansible.builtin.service_facts:

- name: Debug
  ansible.builtin.debug:
    msg: "{{ ansible_facts.services['kubelet.service'].state }}"

# Отключить линтер
tags:
  - skip_ansible_lint

  
- name: facts based on services
  block:
    - name: Get services status
      ansible.builtin.service_facts:

    - name: Debug
      ansible.builtin.debug:
        msg: "{{ ansible_facts.services['kubelet.service'].state }}"

    - name: Create cluster
      ansible.builtin.command:
        # use second NOT default network interface. Default is bridge.
        cmd: >
          sudo kubeadm init --apiserver-advertise-address={{
          ansible_all_ipv4_addresses[1] | quote }}
      when: >
        inventory_hostname in groups['master_nodes'] and
        ansible_facts.services['kubelet.service'].state == 'started'

# Выполнить комманду, только если она до этого не выполнялась - трюк.
- name: join cluster
  shell: "{{ hostvars['control1'].join_command }} >> node_joined.txt"
  args:
    chdir: $HOME
    creates: node_joined.txt